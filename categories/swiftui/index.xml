<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SwiftUI on 全国十大杰出不出名人物</title>
    <link>https://swiftuidev.github.io/categories/swiftui/</link>
    <description>Recent content in SwiftUI on 全国十大杰出不出名人物</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 02 Aug 2019 11:05:44 +0800</lastBuildDate>
    
	<atom:link href="https://swiftuidev.github.io/categories/swiftui/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>SwiftUI进击的巨人2-Layout和Stacks</title>
      <link>https://swiftuidev.github.io/post/swiftui_layout_stacks/</link>
      <pubDate>Fri, 02 Aug 2019 11:05:44 +0800</pubDate>
      
      <guid>https://swiftuidev.github.io/post/swiftui_layout_stacks/</guid>
      <description>本章效果 我们这里添加一个logo图片,logo和Text是横向并列的,这里我们就需要使用到HStack,跟VStack一样,这个是垂直排布的.
将文本都向左对齐,这里使用VStack的alignment参数来进行操作.
Image默认是不可以修改大小的,需要调用resizable()才可以进行大小的修改.
调整Crad Spacer是一个占位控件,默认是会占据所有的位置
struct ContentView: View { var body: some View { VStack { HStack { VStack(alignment: .leading) { Text(&amp;quot;SwiftUI-Dev&amp;quot;) .bold() .foregroundColor(Color(&amp;quot;accent&amp;quot;)) .font(.title) .padding(.top) Text(&amp;quot;Attach&amp;quot;) .foregroundColor(.white) } Spacer() Image(&amp;quot;Logo&amp;quot;) .resizable() .frame(width: 30.0, height: 30.0) } Image(&amp;quot;Background&amp;quot;) } .background(Color.black) .cornerRadius(10) } }  可以看到这里的Card被占位控件影响,宽度铺满了屏幕,我们可以通过修改宽高来固定Card的大小,同样我们再给Card添加左右的内边距,使得文本和logo有一定的距离.
struct ContentView: View { var body: some View { VStack { HStack { VStack(alignment: .leading) { Text(&amp;quot;SwiftUI-Dev&amp;quot;) .bold() .foregroundColor(Color(&amp;quot;accent&amp;quot;)) .font(.headline) .padding(.top) Text(&amp;quot;Attach&amp;quot;) .foregroundColor(.white) } Spacer() Image(&amp;quot;Logo&amp;quot;) .</description>
    </item>
    
    <item>
      <title>SwiftUI进击的巨人1-创建SwiftUI项目</title>
      <link>https://swiftuidev.github.io/post/swiftui_create_ios_app/</link>
      <pubDate>Fri, 02 Aug 2019 10:30:43 +0800</pubDate>
      
      <guid>https://swiftuidev.github.io/post/swiftui_create_ios_app/</guid>
      <description> 要创建一个SwiftUI的应用,步骤和普通的应用创建流程一样,唯一的不同点在于需要选择Use SwiftUI这个选项.如下图一样. 然后你会看到这个界面,如果出现界面,你可以点击resume按钮刷新一下,就是右上角红色圈住的. 制作一个卡片布局 Text Text是SwiftUI提供的文字控件,我们这里修改文字,并设置颜色,粗体.字体样式. VStack 我们在添加一个Text,这里会使用VStack,这是SwiftUI提供的垂直布局容器,VStack里面的控件按照从上到下的顺序进行排序. 添加一个Image Image就是一个图片控件. 在添加一个背景颜色,边框圆角,这个Card就完成了. </description>
    </item>
    
    <item>
      <title>不安装macOS10.15的情况下,使用xcode预览SwiftUI</title>
      <link>https://swiftuidev.github.io/post/no15-swiftui-xcode/</link>
      <pubDate>Tue, 30 Jul 2019 14:54:38 +0800</pubDate>
      
      <guid>https://swiftuidev.github.io/post/no15-swiftui-xcode/</guid>
      <description>由于不想测试新系统的诸多Bug,就没有更新到最新的系统,但是又想玩SwiftUI,所以找到了这么一个办法.
首先下载xcode11 Bete版
打开xcode新建一个playground文件,按照SwiftUI的写法写个Text,然后写入最关键代码:
import SwiftUI import PlaygroundSupport struct TextP: View { var body: some View { Text(&amp;quot;SwiftUI&amp;quot;) } } // 就是这行代码 PlaygroundPage.current.liveView = UIHostingController(rootView: TextP())  </description>
    </item>
    
  </channel>
</rss>